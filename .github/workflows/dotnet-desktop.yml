name: .NET Core Full Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Build Job
  build_backend:
    runs-on: windows-latest

    env:
      Solution_Name: Backend.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      run:  dotnet restore 

    - name: Build Solution
      run: dotnet build --configuration Release

    - name: Publish Artifacts
      run: dotnet publish --configuration Release --output ./output
     
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: ./output
        
  build_seeder:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x


    - name: Restore Dependencies
      run: cd DataSeeder &
        dotnet restore 

    - name: Build Solution
      run: dotnet build --configuration Release

    - name: Publish Artifacts
      run: dotnet publish --configuration Release --output ./output
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: seeder-artifact
        path: ./output

  build_frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4.1.0
      with:
        node-version: '20'

    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifact
        path: frontend/build

  api_test:
      runs-on: ubuntu-latest
      needs: [build_backend,build_seeder]
      services:
        mssql:
          image: mcr.microsoft.com/mssql/server:2022-latest
          env:
            ACCEPT_EULA: "Y"
            SA_PASSWORD: "yourStrong(!)Password"
          ports:
            - 1433:1433
          options: >-
            --health-cmd "exit 0"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

      steps: 
        - name: Download Backend Artifact
          uses: actions/download-artifact@v4
          with:
            name: backend-artifact

        - name: Download Seeder Artifact
          uses: actions/download-artifact@v4
          with:
            name: seeder-artifact

        - name: Setup .NET Core
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: 8.0.x
        - name: test
          run : ls

        - name: Run Data Seeder
          run: cd DatabaseSeeder &
            dotnet DatabaseSeeder.dll

        - name: Start Backend in Background
          run: cd ../Backend &
            dotnet Backend.dll &
            sleep 2
        - name: Install Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '20'
            
        - name: Install postwoman npm
          run: npm i -g @hoppscotch/cli

        - name: Test CardEndpoints
          run: hopp test -e cm32vkcrw00dhh7mfs5l34099 cm2vovwgi002jnyzh1ixfcc9c --token ${{secrets.HOPPSCOTCHPAT}}

  # end-to-end-tests:
  #   runs-on: ubuntu-latest
  #   needs: [build_backend,build_frontend]
  #   services:
  #     mssql:
  #       image: mcr.microsoft.com/mssql/server:2022-latest
  #       env:
  #         ACCEPT_EULA: "Y"
  #         SA_PASSWORD: "yourStrong(!)Password"
  #       ports:
  #         - 1433:1433
  #       options: >-
  #         --health-cmd "exit 0"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps: 
  #     - name: Download Backend Artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: backend-artifact

  #     - name: Wait for SQL Server
  #       run: |
  #         for i in {1..30}; do
  #           if /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P "yourStrong(!)Password" -Q "SELECT 1" > /dev/null 2>&1; then
  #             echo "SQL Server is ready!"
  #             break
  #           fi
  #           echo "Waiting for SQL Server to start..."
  #           sleep 5
  #         done

  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Start Backend in Background
  #       run: |
  #         dotnet Backend.dll --urls &
  #         sleep 10

  #     - name: Install Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
        
  #     - name: Install Dependencies and Start Frontend
  #       run: |
  #         cd ./frontend
  #         npm install
  #         npm run dev &
  #         sleep 10


  # integration_tests:
  #   needs: build_backend
  #   runs-on: ubuntu-latest
  #   services:
  #     mssql:
  #       image: mcr.microsoft.com/mssql/server:2022-latest
  #       env:
  #         ACCEPT_EULA: "Y"
  #         SA_PASSWORD: "yourStrong(!)Password"
  #       ports:
  #         - 1433:1433
  #       options: >-
  #         --health-cmd "exit 0"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps: 
  #     - name: Download Backend Artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: backend-artifact

  #     - name: Wait for SQL Server
  #       run: |
  #         for i in {1..30}; do
  #           if /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P "yourStrong(!)Password" -Q "SELECT 1" > /dev/null 2>&1; then
  #             echo "SQL Server is ready!"
  #             break
  #           fi
  #           echo "Waiting for SQL Server to start..."
  #           sleep 5
  #         done

  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Start Backend in Background
  #       run: |
  #         dotnet Backend.dll --urls &
  #         sleep 10
