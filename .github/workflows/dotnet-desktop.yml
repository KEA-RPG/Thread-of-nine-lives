name: .NET Core Full Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Build Job
  build_backend:
    runs-on: ubuntu-latest

    env:
      Solution_Name: Backend.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      run: dotnet restore 

    - name: Build Solution
      run: dotnet build --configuration Release

    - name: Publish Artifacts
      run: dotnet publish --configuration Release --output ./output
     
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-artifact
        path: ./output
        
  build_frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-artifact
        path: frontend/build
        
  # Database Setup Job
  setup_database:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "yourStrong(!)Password"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Wait for SQL Server
      run: |
        for i in {1..30}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P "yourStrong(!)Password" -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            break
          fi
          echo "Waiting for SQL Server to start..."
          sleep 5
        done

  # Backend Deployment Job
  deploy_backend:
    runs-on: ubuntu-latest
    needs: [build_backend, setup_database]  # Depends on build-backend and setup_database jobs

    env:
      Backend_Port: 7195

    steps:
    - name: Download Backend Artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-artifact

    - name: Start Backend in Background
      run: |
        dotnet Backend.dll --urls &
        sleep 10

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
            
    - name: Install postwoman npm
      run: npm i -g @hoppscotch/cli

    - name: Test CardEndpoints
      run: hopp test -e cm2voy4tk002lnyzhnaow1za9 -d 1000 cm2vovwgi002jnyzh1ixfcc9c --token ${{secrets.HOPPSCOTCHPAT}} --server https://localhost:7195

  # Frontend Deployment Job
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: build_frontend  # Depends on build-frontend job

    env:
      Frontend_Port: 5173

    steps:
    - name: Checkout Frontend Code
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
      
    - name: Install Dependencies and Start Frontend
      run: |
        cd ./frontend
        npm install
        npm run dev &
        sleep 10
  run_api_test:
      runs-on: ubuntu-latest
      needs: deploy_backend
      steps: 
        - name: Install Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18'
            
        - name: Install postwoman npm
          run: npm i -g @hoppscotch/cli

        - name: Test CardEndpoints
          run: hopp test -e cm2voy4tk002lnyzhnaow1za9 -d 1000 cm2vovwgi002jnyzh1ixfcc9c --token ${{secrets.HOPPSCOTCHPAT}} --server http://localhost:5000

  end-to-end-tests:
    needs: [deploy_backend,deploy_frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install dependencies
        run: dotnet restore

      # - name: Build end-to-end test project
      #   run: dotnet build path/to/your/SeleniumTests.csproj --no-restore

      # - name: Run Selenium tests
      #   env:
      #     # You may need to specify browser drivers, depending on your setup
      #     CHROMEWEBDRIVER: /usr/local/bin/chromedriver
      #   run: dotnet test path/to/your/SeleniumTests.csproj --no-build --logger "trx;LogFileName=e2e_test_results.trx"

      # - name: Publish test results
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: e2e-test-results
      #     path: '**/*.trx'

  integration_tests:
    needs: [deploy_backend,setup_database]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install dependencies
        run: dotnet restore
    
          


    
  
